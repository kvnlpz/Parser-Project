[SEPARATOR $$, KEYWORD int, IDENTIFIER i, SEPARATOR ,, IDENTIFIER max, SEPARATOR ,, IDENTIFIER sum, SEPARATOR ;, IDENTIFIER sum, OPERATOR =, NUMBER  0, SEPARATOR ;, IDENTIFIER i, OPERATOR =, NUMBER  1, SEPARATOR ;, KEYWORD get, SEPARATOR (, IDENTIFIER max, SEPARATOR ), SEPARATOR ;, KEYWORD if, SEPARATOR (, IDENTIFIER i, OPERATOR <, IDENTIFIER max, SEPARATOR ), SEPARATOR {, IDENTIFIER sum, OPERATOR =, IDENTIFIER sum, OPERATOR +, IDENTIFIER i, SEPARATOR ;, IDENTIFIER i, OPERATOR =, IDENTIFIER i, OPERATOR +, NUMBER  1, SEPARATOR ;, SEPARATOR }, IDENTIFIER else, SEPARATOR {]
Rat20F>  ::=   <Opt Function Definitions>   $$  <Opt Declaration List>  <Statement List>  $$
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Declaration List>  := <Declaration> ;     |      <Declaration> ; <Declaration List>
<Declaration> ::=   <Qualifier > <IDs> 
Qualifier> ::= int     |    boolean    |  real 
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
<Declaration List> ::= <Declaration List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<Assign> ::=     <Identifier> = <Expression> ;
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Statement List> ::= <Statement List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<Assign> ::=     <Identifier> = <Expression> ;
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Statement List> ::= <Statement List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<Scan> ::=    get ( <IDs )
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
<Statement List> ::= <Statement List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<If> ::=     if  ( <Condition>  ) <Statement>   IF
<Condition> ::=     <Expression>  <Relop>   <Expression>
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
<Primary> ::= ( <IDs> ) | <Empty>
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
TOKEN: OPERATOR <
TOKEN: OPERATOR <
TOKEN: OPERATOR <
TOKEN: OPERATOR <
TOKEN: OPERATOR <
<Relop> ::=        ==   |   !=    |   >     |   <    |  <=   |    =>        
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
Error at line number 42: expected NUMBER but got )
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
Error at line number 43: expected ) but got {
<Statement List> ::= <Statement List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<Assign> ::=     <Identifier> = <Expression> ;
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
<Primary> ::= ( <IDs> ) | <Empty>
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
<Primary> ::= ( <IDs> ) | <Empty>
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Statement List> ::= <Statement List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<Assign> ::=     <Identifier> = <Expression> ;
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
<Primary> ::= ( <IDs> ) | <Empty>
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Statement List> ::= <Statement List>  |  <Empty>
Error at line number 66: expected $$ but got }
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
--==Tokens==--
Token: SEPARATOR
 Lexeme: $$
--=RULES=--
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
<Opt Declaration List> ::= <Declaration List> | <Empty>
--==END==--
  
  
--==Tokens==--
Token: KEYWORD
 Lexeme: int
--=RULES=--
<Declaration List>  := <Declaration> ;     |      <Declaration> ; <Declaration List>
<Declaration> ::=   <Qualifier > <IDs> 
Qualifier> ::= int     |    boolean    |  real 
--==END==--
  
  
--==Tokens==--
Token: IDENTIFIER
 Lexeme: i
--=RULES=--
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
--==END==--
  
  
--==Tokens==--
Token: IDENTIFIER
 Lexeme: max
--=RULES=--
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
--==END==--
  
  
--==Tokens==--
Token: IDENTIFIER
 Lexeme: sum
--=RULES=--
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
--==END==--
  
  
--==Tokens==--
Token: SEPARATOR
 Lexeme: ;
--=RULES=--
--==END==--
  
  
--==Tokens==--
Token: NUMBER
 Lexeme:  0
--=RULES=--
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
--==END==--
  
  
--==Tokens==--
Token: NUMBER
 Lexeme:  1
--=RULES=--
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
--==END==--
  
  
--==Tokens==--
Token: KEYWORD
 Lexeme: get
--=RULES=--
<Statement List> ::= <Statement List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<Scan> ::=    get ( <IDs )
--==END==--
  
  
--==Tokens==--
Token: SEPARATOR
 Lexeme: )
--=RULES=--
--==END==--
  
  
--==Tokens==--
Token: KEYWORD
 Lexeme: if
--=RULES=--
<Statement List> ::= <Statement List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
<If> ::=     if  ( <Condition>  ) <Statement>   IF
<Condition> ::=     <Expression>  <Relop>   <Expression>
--==END==--
  
  
--==Tokens==--
Token: OPERATOR
 Lexeme: <
--=RULES=--
<Primary> ::= ( <IDs> ) | <Empty>
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Relop> ::=        ==   |   !=    |   >     |   <    |  <=   |    =>        
--==END==--
  
  
--==Tokens==--
Token: OPERATOR
 Lexeme: +
--=RULES=--
<Primary> ::= ( <IDs> ) | <Empty>
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
--==END==--
  
  
--==Tokens==--
Token: SEPARATOR
 Lexeme: }
--=RULES=--
<Statement List> ::= <Statement List>  |  <Empty>
Rat20F>  ::=   <Opt Function Definitions>   $$  <Opt Declaration List>  <Statement List>  $$
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
--==END==--
  
  
