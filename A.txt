[SEPARATOR $$, KEYWORD int, IDENTIFIER i, SEPARATOR ,, IDENTIFIER max, SEPARATOR ,, IDENTIFIER sum, SEPARATOR ;, IDENTIFIER sum, SEPARATOR =, NUMBER 0, SEPARATOR ;, IDENTIFIER i, SEPARATOR =, NUMBER 1, SEPARATOR ;, KEYWORD get, SEPARATOR (, IDENTIFIER max, SEPARATOR ), SEPARATOR ;, KEYWORD if, SEPARATOR (, IDENTIFIER i, SEPARATOR <, IDENTIFIER max, SEPARATOR ), SEPARATOR {, IDENTIFIER sum, SEPARATOR =, IDENTIFIER sum, OPERATOR +, IDENTIFIER i, SEPARATOR ;, IDENTIFIER i, SEPARATOR =, IDENTIFIER i, OPERATOR +, NUMBER 1, SEPARATOR ;, SEPARATOR }, IDENTIFIER else, SEPARATOR {, IDENTIFIER sum, SEPARATOR =, NUMBER 8, SEPARATOR ;, IDENTIFIER sum, SEPARATOR =, NUMBER 10, SEPARATOR ;, SEPARATOR }, KEYWORD if, IDENTIFIER put, SEPARATOR (, IDENTIFIER sum, OPERATOR +, IDENTIFIER max, SEPARATOR ), SEPARATOR ;, SEPARATOR $$]
Rat20F>  ::=   <Opt Function Definitions>   $$  <Opt Declaration List>  <Statement List>  $$
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Declaration List>  := <Declaration> ;     |      <Declaration> ; <Declaration List>
<Declaration> ::=   <Qualifier > <IDs>
Qualifier> ::= int     |    boolean    |  real
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
<Declaration List> ::= <Declaration List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While>
<Assign> ::=     <Identifier> = <Expression> ;
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
<Statement List> ::= <Statement List>  |  <Empty>
Error at line number 21: expected $$ but got i
-----------------------------
|                            |
|                            |
|                            |
|                            |
|                            |
|     ----====lexer====----  |
|     ----====lexer====----  |
|     ----====lexer====----  |
|                            |
|                            |
|                            |
|                            |
|                            |
-----------------------------
Token: SEPARATOR Lexeme: $$
--=RULES=--
Rat20F>  ::=   <Opt Function Definitions>   $$  <Opt Declaration List>  <Statement List>  $$
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
<Opt Declaration List> ::= <Declaration List> | <Empty>
--==END=--
Token: KEYWORD Lexeme: int
--=RULES=--
<Declaration List>  := <Declaration> ;     |      <Declaration> ; <Declaration List>
<Declaration> ::=   <Qualifier > <IDs>
Qualifier> ::= int     |    boolean    |  real
--==END=--
Token: IDENTIFIER Lexeme: i
--=RULES=--
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
--==END=--
Token: SEPARATOR Lexeme: ,
Token: IDENTIFIER Lexeme: max
--=RULES=--
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
--==END=--
Token: SEPARATOR Lexeme: ,
Token: IDENTIFIER Lexeme: sum
--=RULES=--
<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
<IDs> ::=     <Identifier>    | <Identifier>, <Empty>
--==END=--
Token: SEPARATOR Lexeme: ;
Token: IDENTIFIER Lexeme: sum
--=RULES=--
<Declaration List> ::= <Declaration List>  |  <Empty>
<Statement List> ::=   <Statement>   | <Statement> <Statement List>
<Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While>
<Assign> ::=     <Identifier> = <Expression> ;
--==END=--
Token: SEPARATOR Lexeme: =
Token: NUMBER Lexeme: 0
--=RULES=--
<Expression>  ::=    <Expression> + <Term>    | <Expression>  - <Term>    |    <Term>
<Term>    ::=      <Term>  *  <Factor>
<Factor> ::=      -  <Primary>    |    <Primary>
<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |
--==END=--
Token: SEPARATOR Lexeme: ;
--=RULES=--
<Term>    ::=      <Term>  *  <Factor>     |   <Term>  /  <Factor>     |     <EMPTY>
<Expression> ::= + <Term> <Expression> | - <Term> <Expression> | <Empty>
--==END=--
Token: IDENTIFIER Lexeme: i
--=RULES=--
<Statement List> ::= <Statement List>  |  <Empty>
--==END=--
Token: SEPARATOR Lexeme: =
Token: NUMBER Lexeme: 1
Token: SEPARATOR Lexeme: ;
Token: KEYWORD Lexeme: get
Token: SEPARATOR Lexeme: (
Token: IDENTIFIER Lexeme: max
Token: SEPARATOR Lexeme: )
Token: SEPARATOR Lexeme: ;
Token: KEYWORD Lexeme: if
Token: SEPARATOR Lexeme: (
Token: IDENTIFIER Lexeme: i
Token: SEPARATOR Lexeme: <
Token: IDENTIFIER Lexeme: max
Token: SEPARATOR Lexeme: )
Token: SEPARATOR Lexeme: {
Token: IDENTIFIER Lexeme: sum
Token: SEPARATOR Lexeme: =
Token: IDENTIFIER Lexeme: sum
Token: OPERATOR Lexeme: +
Token: IDENTIFIER Lexeme: i
Token: SEPARATOR Lexeme: ;
Token: IDENTIFIER Lexeme: i
Token: SEPARATOR Lexeme: =
Token: IDENTIFIER Lexeme: i
Token: OPERATOR Lexeme: +
Token: NUMBER Lexeme: 1
Token: SEPARATOR Lexeme: ;
Token: SEPARATOR Lexeme: }
Token: IDENTIFIER Lexeme: else
Token: SEPARATOR Lexeme: {
Token: IDENTIFIER Lexeme: sum
Token: SEPARATOR Lexeme: =
Token: NUMBER Lexeme: 8
Token: SEPARATOR Lexeme: ;
Token: IDENTIFIER Lexeme: sum
Token: SEPARATOR Lexeme: =
Token: NUMBER Lexeme: 10
Token: SEPARATOR Lexeme: ;
Token: SEPARATOR Lexeme: }
Token: KEYWORD Lexeme: if
Token: IDENTIFIER Lexeme: put
Token: SEPARATOR Lexeme: (
Token: IDENTIFIER Lexeme: sum
Token: OPERATOR Lexeme: +
Token: IDENTIFIER Lexeme: max
Token: SEPARATOR Lexeme: )
Token: SEPARATOR Lexeme: ;
Token: SEPARATOR Lexeme: $$
